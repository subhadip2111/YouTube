{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\subhadip\\\\OneDrive\\\\Desktop\\\\my-youtube\\\\src\\\\component\\\\hemeContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\n\n// Create a context to hold theme state and toggle function\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext();\n\n// Custom hook to access the theme context\nexport const useTheme = () => {\n  _s();\n  return useContext(ThemeContext);\n};\n\n// ThemeProvider component that provides theme state and toggle function to its children\n_s(useTheme, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s2();\n  const [isDarkTheme, setIsDarkTheme] = useState(false);\n\n  // Toggle the theme between dark and light\n  const toggleTheme = () => {\n    setIsDarkTheme(prevTheme => !prevTheme);\n  };\n\n  // Apply the selected theme to the body class\n  useEffect(() => {\n    document.body.classList.toggle('dark', isDarkTheme);\n  }, [isDarkTheme]);\n\n  // Pass theme state and toggle function to context\n  const contextValue = {\n    isDarkTheme,\n    toggleTheme\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s2(ThemeProvider, \"DyhF278kmAHChnZTbYsLrUW36mw=\");\n_c = ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","ThemeContext","useTheme","_s","ThemeProvider","children","_s2","isDarkTheme","setIsDarkTheme","toggleTheme","prevTheme","useEffect","document","body","classList","toggle","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/subhadip/OneDrive/Desktop/my-youtube/src/component/hemeContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\r\n\r\n// Create a context to hold theme state and toggle function\r\nconst ThemeContext = createContext();\r\n\r\n// Custom hook to access the theme context\r\nexport const useTheme = () => {\r\n  return useContext(ThemeContext);\r\n};\r\n\r\n// ThemeProvider component that provides theme state and toggle function to its children\r\nexport const ThemeProvider = ({ children }) => {\r\n  const [isDarkTheme, setIsDarkTheme] = useState(false);\r\n\r\n  // Toggle the theme between dark and light\r\n  const toggleTheme = () => {\r\n    setIsDarkTheme(prevTheme => !prevTheme);\r\n  };\r\n\r\n  // Apply the selected theme to the body class\r\n  useEffect(() => {\r\n    document.body.classList.toggle('dark', isDarkTheme);\r\n  }, [isDarkTheme]);\r\n\r\n  // Pass theme state and toggle function to context\r\n  const contextValue = {\r\n    isDarkTheme,\r\n    toggleTheme,\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={contextValue}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;;AAElE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,gBAAGL,aAAa,CAAC,CAAC;;AAEpC;AACA,OAAO,MAAMM,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,OAAON,UAAU,CAACI,YAAY,CAAC;AACjC,CAAC;;AAED;AAAAE,EAAA,CAJaD,QAAQ;AAKrB,OAAO,MAAME,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC7C,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;;EAErD;EACA,MAAMW,WAAW,GAAGA,CAAA,KAAM;IACxBD,cAAc,CAACE,SAAS,IAAI,CAACA,SAAS,CAAC;EACzC,CAAC;;EAED;EACAC,SAAS,CAAC,MAAM;IACdC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,MAAM,CAAC,MAAM,EAAER,WAAW,CAAC;EACrD,CAAC,EAAE,CAACA,WAAW,CAAC,CAAC;;EAEjB;EACA,MAAMS,YAAY,GAAG;IACnBT,WAAW;IACXE;EACF,CAAC;EAED,oBACET,OAAA,CAACC,YAAY,CAACgB,QAAQ;IAACC,KAAK,EAAEF,YAAa;IAAAX,QAAA,EACxCA;EAAQ;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAAChB,GAAA,CAxBWF,aAAa;AAAAmB,EAAA,GAAbnB,aAAa;AAAA,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
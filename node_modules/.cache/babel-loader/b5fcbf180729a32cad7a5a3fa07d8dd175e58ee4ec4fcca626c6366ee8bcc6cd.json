{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\subhadip\\\\OneDrive\\\\Desktop\\\\my-youtube\\\\src\\\\component\\\\LiveChat.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react'\n// import ChatMessage from './ChatMessage'\n// import { useDispatch, useSelector } from 'react-redux'\n// import { addMessage } from '../utils/chatSlice'\n// import { generateRandomName, makeRandomMessage } from '../utils/helper'\n\n// export const LiveChat = () => {\n// const [liveMessage, setLiveMessage] = useState(\"\");\n// const chatMessages=useSelector(store=>store.chat.messages)\n\n//     const dispatch=useDispatch()\n//          useEffect(() => {\n\n//            const i=  setInterval(() => {\n//               //Api poling\n//                //console.log(\"api poling\")\n\n//                dispatch(addMessage({name:generateRandomName(),  message: makeRandomMessage(40) + \" ðŸš€\",}))\n\n//            },2000)\n\n//              return ()=> clearInterval(i)\n//  },[])\n//   return (\n\n//        <>\n//       <div className=\"w-full h-[600px] ml-2 p-2 border border-red-950 bg-red-300 rounded-lg overflow-y-scroll flex flex-col-reverse\">\n\n//         <div>  {\n// //             // Disclaimer: Don't use indexes as keys\n//              chatMessages.map((c, i) => (\n//                <ChatMessage key={i} name={c.name} message={c.message} />\n//             ))\n//               }\n\n// </div>\n\n//       </div>\n\n//      <form\n//          className=\"w-full p-2 ml-2 border border-black\"\n//          onSubmit={(e) => {\n//            e.preventDefault();\n\n//            dispatch(\n//              addMessage({\n//                name: \"Subhadip\",\n//                message: liveMessage,\n//              })\n//            );\n//            setLiveMessage(\"\");\n//          }}\n//        >\n//          <input\n//            className=\"px-2 w-96\"\n//            type=\"text\"\n//            value={liveMessage}\n//            onChange={(e) => {\n//              setLiveMessage(e.target.value);\n//            }}\n//          />\n//          <button className=\"px-2 mx-2 bg-green-400\">Send</button>\n//        </form>\n//     </>\n//   )\n// }\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addMessage } from '../utils/chatSlice';\nimport { generateRandomName, makeRandomMessage } from '../utils/helper';\nimport ChatMessage from './ChatMessage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LiveChat = () => {\n  _s();\n  const [liveMessage, setLiveMessage] = useState(\"\");\n  const chatMessages = useSelector(store => store.chat.messages);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const interval = setInterval(() => {\n      dispatch(addMessage({\n        name: generateRandomName(),\n        message: makeRandomMessage(40) + \" ðŸš€\"\n      }));\n    }, 2000);\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col h-[600px] bg-gradient-to-r from-blue-400 to-purple-500 rounded-lg p-4 overflow-hidden shadow-lg\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-grow overflow-y-scroll\",\n      children: chatMessages.map((c, index) => /*#__PURE__*/_jsxDEV(ChatMessage, {\n        name: c.name,\n        message: c.message\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: e => {\n        e.preventDefault();\n        dispatch(addMessage({\n          name: \"Subhadip\",\n          message: liveMessage\n        }));\n        setLiveMessage(\"\");\n      },\n      className: \"flex items-center mt-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"flex-grow px-3 py-2 rounded-l-lg border border-gray-300 focus:outline-none\",\n        type: \"text\",\n        placeholder: \"Type your message...\",\n        value: liveMessage,\n        onChange: e => {\n          setLiveMessage(e.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-blue-600 text-white px-4 py-2 rounded-r-lg hover:bg-blue-700 transition focus:outline-none\",\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n\n// default LiveChat;\n_s(LiveChat, \"qk9wriCWclOfSrGoGjelaF1lcQc=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = LiveChat;\nvar _c;\n$RefreshReg$(_c, \"LiveChat\");","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","addMessage","generateRandomName","makeRandomMessage","ChatMessage","jsxDEV","_jsxDEV","LiveChat","_s","liveMessage","setLiveMessage","chatMessages","store","chat","messages","dispatch","interval","setInterval","name","message","clearInterval","className","children","map","c","index","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","_c","$RefreshReg$"],"sources":["C:/Users/subhadip/OneDrive/Desktop/my-youtube/src/component/LiveChat.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react'\r\n// import ChatMessage from './ChatMessage'\r\n// import { useDispatch, useSelector } from 'react-redux'\r\n// import { addMessage } from '../utils/chatSlice'\r\n// import { generateRandomName, makeRandomMessage } from '../utils/helper'\r\n\r\n\r\n\r\n\r\n\r\n// export const LiveChat = () => {\r\n// const [liveMessage, setLiveMessage] = useState(\"\");\r\n// const chatMessages=useSelector(store=>store.chat.messages)\r\n\r\n//     const dispatch=useDispatch()\r\n//          useEffect(() => {\r\n     \r\n//            const i=  setInterval(() => {\r\n//               //Api poling\r\n//                //console.log(\"api poling\")\r\n               \r\n//                dispatch(addMessage({name:generateRandomName(),  message: makeRandomMessage(40) + \" ðŸš€\",}))\r\n               \r\n//            },2000)\r\n             \r\n             \r\n//              return ()=> clearInterval(i)\r\n//  },[])\r\n//   return (\r\n \r\n      \r\n//        <>\r\n//       <div className=\"w-full h-[600px] ml-2 p-2 border border-red-950 bg-red-300 rounded-lg overflow-y-scroll flex flex-col-reverse\">\r\n   \r\n      \r\n             \r\n//         <div>  {\r\n// //             // Disclaimer: Don't use indexes as keys\r\n//              chatMessages.map((c, i) => (\r\n//                <ChatMessage key={i} name={c.name} message={c.message} />\r\n//             ))\r\n//               }\r\n              \r\n// </div>\r\n            \r\n\r\n\r\n//       </div>\r\n\r\n//      <form\r\n//          className=\"w-full p-2 ml-2 border border-black\"\r\n//          onSubmit={(e) => {\r\n//            e.preventDefault();\r\n\r\n//            dispatch(\r\n//              addMessage({\r\n//                name: \"Subhadip\",\r\n//                message: liveMessage,\r\n//              })\r\n//            );\r\n//            setLiveMessage(\"\");\r\n//          }}\r\n//        >\r\n//          <input\r\n//            className=\"px-2 w-96\"\r\n//            type=\"text\"\r\n//            value={liveMessage}\r\n//            onChange={(e) => {\r\n//              setLiveMessage(e.target.value);\r\n//            }}\r\n//          />\r\n//          <button className=\"px-2 mx-2 bg-green-400\">Send</button>\r\n//        </form>\r\n//     </>\r\n//   )\r\n// }\r\n\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addMessage } from '../utils/chatSlice';\r\nimport { generateRandomName, makeRandomMessage } from '../utils/helper';\r\nimport ChatMessage from './ChatMessage';\r\n\r\nconst LiveChat = () => {\r\n  const [liveMessage, setLiveMessage] = useState(\"\");\r\n  const chatMessages = useSelector((store) => store.chat.messages);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      dispatch(\r\n        addMessage({\r\n          name: generateRandomName(),\r\n          message: makeRandomMessage(40) + \" ðŸš€\",\r\n        })\r\n      );\r\n    }, 2000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"flex flex-col h-[600px] bg-gradient-to-r from-blue-400 to-purple-500 rounded-lg p-4 overflow-hidden shadow-lg\">\r\n      <div className=\"flex-grow overflow-y-scroll\">\r\n        {chatMessages.map((c, index) => (\r\n          <ChatMessage key={index} name={c.name} message={c.message} />\r\n        ))}\r\n      </div>\r\n\r\n      <form\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          dispatch(addMessage({ name: \"Subhadip\", message: liveMessage }));\r\n          setLiveMessage(\"\");\r\n        }}\r\n        className=\"flex items-center mt-4\"\r\n      >\r\n        <input\r\n          className=\"flex-grow px-3 py-2 rounded-l-lg border border-gray-300 focus:outline-none\"\r\n          type=\"text\"\r\n          placeholder=\"Type your message...\"\r\n          value={liveMessage}\r\n          onChange={(e) => {\r\n            setLiveMessage(e.target.value);\r\n          }}\r\n        />\r\n        <button\r\n          className=\"bg-blue-600 text-white px-4 py-2 rounded-r-lg hover:bg-blue-700 transition focus:outline-none\"\r\n          type=\"submit\"\r\n        >\r\n          Send\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\n// default LiveChat;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
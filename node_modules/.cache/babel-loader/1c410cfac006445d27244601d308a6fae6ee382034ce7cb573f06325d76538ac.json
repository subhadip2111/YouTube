{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\subhadip\\\\OneDrive\\\\Desktop\\\\my-youtube\\\\src\\\\component\\\\LiveChat.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport ChatMessage from './ChatMessage';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addMessage } from '../utils/chatSlice';\nimport { generateRandomName, makeRandomMessage } from '../utils/helper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const LiveChat = () => {\n  _s();\n  const [liveMessage, setLiveMessage] = useState(\"\");\n  const chatMessages = useSelector(store => store.chat.messages);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const i = setInterval(() => {\n      //Api poling\n      //console.log(\"api poling\")\n\n      dispatch(addMessage({\n        name: generateRandomName(),\n        message: makeRandomMessage(40) + \" ðŸš€\"\n      }));\n    }, 2000);\n    return () => clearInterval(i);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full h-[600px] ml-2 p-2 border border-red-950 bg-red-300 rounded-lg overflow-y-scroll flex flex-col-reverse\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"  \",\n        //             // Disclaimer: Don't use indexes as keys\n        chatMessages.map((c, i) => /*#__PURE__*/_jsxDEV(ChatMessage, {\n          name: c.name,\n          message: c.message\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 16\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"w-full p-2 ml-2 border border-black\",\n      onSubmit: e => {\n        e.preventDefault();\n        dispatch(addMessage({\n          name: \"Subhadip\",\n          message: liveMessage\n        }));\n        setLiveMessage(\"\");\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"px-2 w-96\",\n        type: \"text\",\n        value: liveMessage,\n        onChange: e => {\n          setLiveMessage(e.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"px-2 mx-2 bg-green-400\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true);\n};\n_s(LiveChat, \"qk9wriCWclOfSrGoGjelaF1lcQc=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = LiveChat;\nvar _c;\n$RefreshReg$(_c, \"LiveChat\");","map":{"version":3,"names":["React","useEffect","useState","ChatMessage","useDispatch","useSelector","addMessage","generateRandomName","makeRandomMessage","jsxDEV","_jsxDEV","Fragment","_Fragment","LiveChat","_s","liveMessage","setLiveMessage","chatMessages","store","chat","messages","dispatch","i","setInterval","name","message","clearInterval","children","className","map","c","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","e","preventDefault","type","value","onChange","target","_c","$RefreshReg$"],"sources":["C:/Users/subhadip/OneDrive/Desktop/my-youtube/src/component/LiveChat.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport ChatMessage from './ChatMessage'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { addMessage } from '../utils/chatSlice'\r\nimport { generateRandomName, makeRandomMessage } from '../utils/helper'\r\n\r\n\r\n\r\n\r\n\r\nexport const LiveChat = () => {\r\nconst [liveMessage, setLiveMessage] = useState(\"\");\r\nconst chatMessages=useSelector(store=>store.chat.messages)\r\n\r\n    const dispatch=useDispatch()\r\n         useEffect(() => {\r\n     \r\n           const i=  setInterval(() => {\r\n              //Api poling\r\n               //console.log(\"api poling\")\r\n               \r\n               dispatch(addMessage({name:generateRandomName(),  message: makeRandomMessage(40) + \" ðŸš€\",}))\r\n               \r\n           },2000)\r\n             \r\n             \r\n             return ()=> clearInterval(i)\r\n },[])\r\n  return (\r\n \r\n      \r\n       <>\r\n      <div className=\"w-full h-[600px] ml-2 p-2 border border-red-950 bg-red-300 rounded-lg overflow-y-scroll flex flex-col-reverse\">\r\n   \r\n      \r\n             \r\n        <div>  {\r\n//             // Disclaimer: Don't use indexes as keys\r\n             chatMessages.map((c, i) => (\r\n               <ChatMessage key={i} name={c.name} message={c.message} />\r\n            ))\r\n              }\r\n              \r\n</div>\r\n            \r\n\r\n\r\n      </div>\r\n\r\n     <form\r\n         className=\"w-full p-2 ml-2 border border-black\"\r\n         onSubmit={(e) => {\r\n           e.preventDefault();\r\n\r\n           dispatch(\r\n             addMessage({\r\n               name: \"Subhadip\",\r\n               message: liveMessage,\r\n             })\r\n           );\r\n           setLiveMessage(\"\");\r\n         }}\r\n       >\r\n         <input\r\n           className=\"px-2 w-96\"\r\n           type=\"text\"\r\n           value={liveMessage}\r\n           onChange={(e) => {\r\n             setLiveMessage(e.target.value);\r\n           }}\r\n         />\r\n         <button className=\"px-2 mx-2 bg-green-400\">Send</button>\r\n       </form>\r\n    </>\r\n  )\r\n}\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}